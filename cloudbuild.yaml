# cloudbuild.yaml (Improved Version)
steps:
  # 1. Install Functions Dependencies & Lint (Optional but Recommended)
  - name: 'node:20' # Use a specific Node.js version matching your functions/package.json engine
    id: Install Functions Dependencies & Lint
    entrypoint: 'npm'
    args: ['install']
    dir: 'functions' # Specify the directory
  - name: 'node:20' # Use the same Node.js version
    id: Lint Functions Code
    entrypoint: 'npm'
    args: ['run', 'lint'] # Assumes 'lint' script exists in functions/package.json
    dir: 'functions'

# 2. Deploy Firebase Cloud Functions
 # Uses the official Firebase builder image
 - name: 'gcr.io/google-appengine/firebase' # <-- CHANGE THIS IMAGE NAME
   id: Deploy Cloud Functions
   args: # <-- REMOVE entrypoint, use args directly for firebase commands
     - 'deploy'
     - '--only'
     - 'functions'
     - '--project'
     - '$PROJECT_ID'
     - '--non-interactive'
     # - '--force' # Add back if necessary, but often better to avoid unless needed

# 3. Build and push the backend production image
 - name: 'gcr.io/cloud-builders/docker'
   id: Build Backend Prod Image
   args:
     - 'build'
     - '-t'
     - 'gcr.io/$PROJECT_ID/cloud-explorer-backend-prod:$COMMIT_SHA'
     - '-f'
     - 'Dockerfile.prod' # Use Dockerfile from the root
     - './backend_app'    # Set build context to the backend_app directory
 # Push the image (can be a separate step or combined if preferred)
 - name: 'gcr.io/cloud-builders/docker'
   id: Push Backend Prod Image
   args: ['push', 'gcr.io/$PROJECT_ID/cloud-explorer-backend-prod:$COMMIT_SHA']

  # 4. Deploy Backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy Backend to Cloud Run
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cloud-explorer-backend' # Your Cloud Run service name
      - '--image'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend-prod:$COMMIT_SHA' # Use $PROJECT_ID variable
      - '--region'
      - 'us-central1' # Or your preferred region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Keep if public access is needed, otherwise remove for authenticated access

  # 5. Build Frontend Image (Purpose needs clarification)
  # Builds the dev image as per your original file. Consider if you need a prod build/deploy.
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Frontend Dev Image
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Use $PROJECT_ID variable for image name
        docker build -t gcr.io/$PROJECT_ID/cloud-explorer-frontend-dev:$COMMIT_SHA -f Dockerfile.dev .
        docker push gcr.io/$PROJECT_ID/cloud-explorer-frontend-dev:$COMMIT_SHA

# List images built by this pipeline (uses $PROJECT_ID)
images:
  - 'gcr.io/$PROJECT_ID/cloud-explorer-backend-prod:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/cloud-explorer-frontend-dev:$COMMIT_SHA'

# Add this options section at the end of the file
options:
  logging: CLOUD_LOGGING_ONLY

# Optional: Specify timeout for the build
# timeout: 1200s

# Optional: Specify service account with necessary permissions
# serviceAccount: 'projects/your-project-id/serviceAccounts/your-cloud-build-sa@your-project-id.iam.gserviceaccount.com'