# cloudbuild.yaml for Cloud Explorer (Dev/Test Build - Revised)

steps:
  # 1. Install root dependencies (if any, for build scripts, etc.)
  # This step is fine if you have root-level dependencies.
  - name: 'node:20'
    id: 'install-root-dependencies' # Renamed for clarity
    entrypoint: 'npm'
    args: ['install']
    # Note: Review 'npm audit' locally for vulnerabilities found in logs.
    # Note: Resolve peer dependency warnings locally if possible.

  # Test step (Commented Out)
  # - name: 'node:20'
  #   id: 'run-tests'
  #   entrypoint: 'npm'
  #   args: ['test']
  #   waitFor: ['install-root-dependencies'] # Good practice to wait for dependency installation
  # Step to fetch the SendGrid API key and create the .env file for functions
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-functions-env'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching SendGrid API Key..."
        # Ensure the functions directory exists before trying to write into it
        mkdir -p functions
        gcloud secrets versions access latest --secret="sendgrid-api-key" --project="$PROJECT_ID" --format='get(payload.data)' | tr '_-' '/+' | base64 -d > sendgrid_key_temp.txt
        # Ensure the variable name matches what defineString expects in your Firebase functions config
        echo "SENDGRID_KEY=$(cat sendgrid_key_temp.txt)" > functions/.env
        rm sendgrid_key_temp.txt # Clean up temporary file
        echo "Created functions/.env file."
    # waitFor: ['install-root-dependencies'] # Not strictly necessary unless scripts from root are needed here

  # 2. Build and deploy Firebase functions
  - name: 'node:20'
    id: 'install-functions-dependencies'
    entrypoint: 'npm'
    args: ['install']
    dir: 'functions' # Run in functions directory

  # 3. Lint Firebase functions
  - name: 'node:20'
    id: 'lint-functions'
    entrypoint: 'npm'
    args: ['run', 'lint'] # Assumes 'lint' script passes
    dir: 'functions'
    waitFor: ['install-functions-dependencies']

  # 4. Deploy Firebase Functions (Adjust step numbering if needed)
  - name: 'node:20'
    id: 'deploy-firebase-functions'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing Firebase CLI..."
        npm install -g firebase-tools
        echo "Deploying Firebase functions with debug output..."
        firebase deploy --only functions \
          --project "$PROJECT_ID" \
          --non-interactive \
          --debug # Keep debug for now, you can remove it once deployments are stable
    waitFor: ['lint-functions'] # This step now waits for lint-functions

  # 3. Build and push backend container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
      - '-f'
      - 'Dockerfile.prod' # Assumes Dockerfile.prod is at the repository root
      - '.' # CORRECTED: Build context is the repository root.
        # Your Dockerfile.prod should then handle paths like `COPY ./backend /app/`
    # waitFor: ['install-root-dependencies'] # If any root scripts affect the backend build

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
    waitFor: ['build-backend']

  # 4. Deploy backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cloud-explorer-backend' # Your Cloud Run service name
      - '--image'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
      - '--region'
      - 'us-central1' # Specify your desired region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Review if your service truly needs to be public
      - '--timeout=600s' # Max request timeout
      - '--set-env-vars=NODE_ENV=production'
      # Scaling settings
      - '--min-instances=0' # Can scale to zero
      - '--max-instances=10' # Max instances
      # Resource allocation
      - '--cpu=1'
      - '--memory=512Mi'
      # Port configuration: Cloud Run sets a PORT env var (default 8080) that your app should listen on.
      # The --port flag here sets the port the *service* is available on.
      - '--port=8080'
      # REVISED COMMENT: The following comment was inaccurate. No startup probe was defined.
      # To add a startup probe (e.g., if your app has a long startup time):
      # - '--startup-cpu-boost'
      # - '--update-labels=commit-sha=$COMMIT_SHA' # Example: Add labels for tracking
    waitFor: ['push-backend']

  # 5. Build React Native app for Android
  # Build the custom Android builder image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-android-builder-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/react-native-builder:latest'
      - '-f'
      - 'android/Dockerfile.builder' # Path to your builder Dockerfile
      - './android' # Context for the builder Dockerfile
    # waitFor: ['install-root-dependencies']

  # Use the custom builder image to build the Android app
  - name: 'gcr.io/$PROJECT_ID/react-native-builder:latest' # Use the image just built
    id: 'build-android-app'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Ensure gradlew is executable (should be set in git)
        # chmod +x ./android/gradlew # Uncomment if gradlew isn't executable
        cd android && ./gradlew assembleRelease
        # RECOMMENDED: Check exit code to fail build if gradle fails
        if [ $$? -ne 0 ]; then echo "Gradle build failed!"; exit 1; fi
    waitFor: ['build-android-builder-image']
    # Define a volume for gradle cache if needed for faster builds,
    # though this requires careful setup for cross-build caching.
    # volumes:
    #   - name: 'gradle-cache'
    #     path: '/root/.gradle'

  # 6. Upload APK to Google Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'upload-apk'
    entrypoint: 'gsutil'
    args:
      - 'cp'
      # Assumes the APK path within the workspace after Step 5 is correct
      - 'android/app/build/outputs/apk/release/app-release.apk'
      - 'gs://$PROJECT_ID-builds/cloud-explorer-$COMMIT_SHA.apk'
    waitFor: ['build-android-app']

  # 7. Update Firestore with new app version info (Commented Out - review auth if enabling)
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk' # Consider gcr.io/firebase/firebase-tools
  #   id: 'update-app-version'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       npm install -g firebase-tools # Install if not using firebase-tools image
  #       # Ensure $_FIREBASE_TOKEN is available as a substitution or the service account has permissions
  #       firebase firestore:set \
  #         --project "$PROJECT_ID" \
  #         "appVersions/latest" \
  #         --data "{\"version\": \"$COMMIT_SHA\", \"buildDate\": \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\", \"downloadUrl\": \"gs://$PROJECT_ID-builds/cloud-explorer-$COMMIT_SHA.apk\"}"
  #         # Add --token "$_FIREBASE_TOKEN" if using a token
  #   waitFor: ['upload-apk']

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/react-native-builder:latest' # Builder image is pushed, useful for caching/reuse

# Additional options
options:
  logging: CLOUD_LOGGING_ONLY
  # machineType: 'N1_HIGHCPU_8' # Uncomment if needed and quotas allow
  # defaultLogsBucketBehavior: 'REGIONAL_USER_OWNED_BUCKET' # Example for custom logs bucket

# Increased timeout for potentially long mobile app builds
timeout: '3600s' # 1 hour

# Artifacts configuration to store build outputs in GCS
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-builds/' # Ensure this GCS bucket exists and CB SA has write access
    paths:
      - 'android/app/build/outputs/apk/release/app-release.apk'
      # - 'another/output/file.txt' # Example of other artifacts
# Optional: Define substitutions that can be set in the trigger
# substitutions:
#  _FIREBASE_TOKEN: 'your-default-token-here-or-set-in-trigger' # Example for Step 7
