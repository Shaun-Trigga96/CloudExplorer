# cloudbuild.yaml for Cloud Explorer (Dev/Test Build)

steps:
  # 1. Install dependencies
  - name: 'node:20'
    id: 'install-dependencies'
    entrypoint: 'npm'
    args: ['install']
    # Note: Review 'npm audit' locally for vulnerabilities found in logs.
    # Note: Resolve peer dependency warnings locally if possible.

  # 2. Fetch the SendGrid API key and create the .env file
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-functions-env'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching SendGrid API Key..."
        gcloud secrets versions access latest --secret="sendgrid-api-key" --project="$PROJECT_ID" > sendgrid_key_temp.txt
        # Create the .env file inside the functions directory
        # Ensure the variable name matches what defineString expects
        echo "SENDGRID_KEY=$(cat sendgrid_key_temp.txt)" > functions/.env
        echo "Created functions/.env file."
        # Clean up temporary file
        rm sendgrid_key_temp.txt

  # 3. Build and deploy Firebase functions
  - name: 'node:20'
    id: 'install-functions-dependencies'
    entrypoint: 'npm'
    args: ['install']
    dir: 'functions'

  - name: 'node:20'
    id: 'lint-functions'
    entrypoint: 'npm'
    args: ['run', 'lint']
    dir: 'functions'

  # 4. Deploy Firebase Functions
  - name: 'node:20'
    id: 'deploy-firebase-functions'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install Firebase CLI globally
        npm install -g firebase-tools
        # Deploy Firebase functions using the service account
        firebase deploy --only functions \
          --project "$PROJECT_ID" \
          --non-interactive

  # 5. Build and push backend container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
      - '-f'
      - 'backend/Dockerfile.prod'  # Fixed path to Dockerfile
      - './backend'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'

  # 6. Deploy backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cloud-explorer-backend'
      - '--image'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--timeout'
      - '600s'
      - '--set-env-vars'
      - 'NODE_ENV=production'
      - '--min-instances=0'
      - '--max-instances=10'
      - '--cpu=1'
      - '--memory=512Mi'
      - '--port=8080'

  # 7. Build React Native app for Android
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-android-builder-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/react-native-builder:$COMMIT_SHA'  # Added unique tag
      - '-f'
      - 'android/Dockerfile.builder'
      - './android'

  - name: 'gcr.io/$PROJECT_ID/react-native-builder:$COMMIT_SHA'  # Use unique tagged image
    id: 'build-android-app'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd android
        chmod +x ./gradlew  # Ensure gradlew is executable
        ./gradlew assembleRelease
        if [ $? -ne 0 ]; then 
          echo "Gradle build failed!"
          exit 1
        fi

  # 8. Upload APK to Google Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'upload-apk'
    entrypoint: 'gsutil'
    args:
      - 'cp'
      - 'android/app/build/outputs/apk/release/app-release.apk'
      - 'gs://$PROJECT_ID-builds/cloud-explorer-$COMMIT_SHA.apk'

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/react-native-builder:$COMMIT_SHA'  # Added unique tag

# Additional options
options:
  logging: CLOUD_LOGGING_ONLY

# Increased timeout for mobile app builds
timeout: '3600s'

# Artifacts configuration to store build outputs
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-builds/'
    paths: ['android/app/build/outputs/apk/release/app-release.apk']