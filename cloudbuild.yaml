# cloudbuild.yaml for Cloud Explorer (Dev/Test Build - Corrected)

steps:
  # 1. Install dependencies (Test step commented out)
  - name: 'node:20'
    id: 'install-dependencies'
    entrypoint: 'npm'
    args: ['install']
    # Note: Review 'npm audit' locally for vulnerabilities found in logs.
    # Note: Resolve peer dependency warnings locally if possible.

  # - name: 'node:20' # <--- STEP 1 (TESTS) COMMENTED OUT
  #   id: 'run-tests'
  #   entrypoint: 'npm'
  #   args: ['test']

  # 2. Build and deploy Firebase functions
  - name: 'node:20'
    id: 'install-functions-dependencies'
    entrypoint: 'npm'
    args: ['install']
    dir: 'functions' # Run in functions directory

  - name: 'node:20'
    id: 'lint-functions'
    entrypoint: 'npm'
    args: ['run', 'lint'] # Assumes 'lint' script passes
    dir: 'functions' # Run in functions directory

  # Deploy Firebase Functions with Service Account Key
  - name: 'node:20'
    id: 'deploy-firebase-functions'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install Firebase CLI globally
        npm install -g firebase-tools

        # Deploy Firebase functions using the service account key
        firebase deploy --only functions \
          --project "$PROJECT_ID" \
          --non-interactive
    env:
      - 'GOOGLE_APPLICATION_CREDENTIALS=/workspace/firebase-admin-key.json'

  # 3. Build and push backend container (Corrected Paths)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
      - '-f'
      - 'Dockerfile.prod'  # <--- CORRECTED: Assumes Dockerfile.prod is at the root
      - './backend'     # <--- CORRECTED: Assumes backend code is in backend/

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'

  # 4. Deploy backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cloud-explorer-backend' # Consider 'cloud-explorer-backend-dev' for non-prod
      - '--image'
      - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
      - '--region'
      - 'us-central1' # Or your preferred/newly configured build region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

  # 5. Build React Native app for Android
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-android-builder-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/react-native-builder:latest'
      - '-f'
      - 'android/Dockerfile.builder' # Assumes this path is correct
      - './android'                  # Assumes this context is corrects

  - name: 'gcr.io/$PROJECT_ID/react-native-builder:latest' # Use the image just built
    id: 'build-android-app'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          # Ensure gradlew is executable if necessary: chmod +x ./gradlew
          cd android && ./gradlew assembleRelease
          # Optional: Check exit code to fail build if gradle fails
          # if [ $$? -ne 0 ]; then echo "Gradle build failed!"; exit 1; fi

  # 6. Upload APK to Google Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'upload-apk'
    entrypoint: 'gsutil'
    args:
      - 'cp'
      # Assumes the APK path within the workspace after Step 5 is correct
      - 'android/app/build/outputs/apk/release/app-release.apk'
      - 'gs://$PROJECT_ID-builds/cloud-explorer-$COMMIT_SHA.apk'

  # # 7. Update Firestore with new app version info # <--- STEP 7 COMMENTED OUT
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   id: 'update-app-version'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       npm install -g firebase-tools && \
  #       firebase firestore:set --project $PROJECT_ID /appVersions/latest --data '{"version": "$COMMIT_SHA", "buildDate": "'$(date -u +'%Y-%m-%dT%H:%M:%SZ')'", "downloadUrl": "gs://$PROJECT_ID-builds/cloud-explorer-$COMMIT_SHA.apk"}' --token $_FIREBASE_TOKEN
  #       # WARNING: Might fail with auth errors. Use --token if needed.

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/cloud-explorer-backend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/react-native-builder:latest' # Builder image, consider if needed here

# Additional options
options:
  logging: CLOUD_LOGGING_ONLY
  # machineType: 'N1_HIGHCPU_8' # Removed based on previous quota error
# Increased timeout for mobile app builds
timeout: '3600s'

# Artifacts configuration to store build outputs
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-builds/' # Make sure this bucket exists
    paths: ['android/app/build/outputs/apk/release/app-release.apk']