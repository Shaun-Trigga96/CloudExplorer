# Use an official Node.js runtime as a parent image (use the version your backend needs)
FROM node:24-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# --- Dependency Installation ---
# Copy package.json and package-lock.json (or yarn.lock) first
# This leverages Docker layer caching. Dependencies are only re-installed if these files change.
COPY package*.json ./
# If using yarn, copy yarn.lock and use 'RUN yarn install --production --frozen-lockfile'
RUN npm ci --only=production

# --- Application Code ---
# Bundle app source code inside the Docker image
# Copy remaining backend code (server.js, routes, controllers, etc.)
COPY . .

# --- Runtime ---
# Make port 8080 available to the world outside this container
# Cloud Run expects containers to listen on port 8080 by default (or the PORT env var)
EXPOSE 5000

# Define the command to run your app using node
# Assumes your entry point script is named 'server.js'
CMD [ "node", "server.js" ]

# Optional: Add a basic health check if your app has a health endpoint (e.g., /healthz)
# HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
#   CMD curl -f http://localhost:5000/health || exit 1